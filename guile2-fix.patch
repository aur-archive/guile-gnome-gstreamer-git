diff -crB guile-gnome-platform-build/gstreamer/gnome/gstreamer.scm guile-gnome-platform-fix/gstreamer/gnome/gstreamer.scm
*** guile-gnome-platform-build/gstreamer/gnome/gstreamer.scm	2012-04-10 16:56:48.414396725 +0200
--- guile-gnome-platform-fix/gstreamer/gnome/gstreamer.scm	2012-04-10 17:04:30.511893329 +0200
***************
*** 52,57 ****
--- 52,67 ----
           specifier)))
  
  (define-macro (with-gst-debug specifier . body)
+   "Usage:
+ @example
+  (with-gst-debug ((@var{category1} #var{level1}) (@var{category2} @var{level2}) ...)
+    @var{body}
+ @end example
+ 
+ Execute @var{body} with GStreamer debugging. The debugging thresholds
+ for categories named @var{category1}, @var{category2}, etc. will be set
+ to the specified values during the dynamic extent of @var{body}. As a
+ special case, @code{*all*} is interpreted to be the default threshold."
    (let* ((levels (construct-levels-list specifier))
           (default-level (and=> (assq '*all* levels)
                                 (lambda (x) `(quote ,x)))))
***************
*** 75,91 ****
                (if (not (eq? (car l) '*all*))
                    (gst-debug-category-set-threshold (cadr l) (cadddr l))))
              ',levels)))))
- (set-object-property! with-gst-debug 'documentation
-                       "Usage:
- @example
-  (with-gst-debug ((@var{category1} #var{level1}) (@var{category2} @var{level2}) ...)
-    @var{body}
- @end example
- 
- Execute @var{body} with GStreamer debugging. The debugging thresholds
- for categories named @var{category1}, @var{category2}, etc. will be set
- to the specified values during the dynamic extent of @var{body}. As a
- special case, @code{*all*} is interpreted to be the default threshold.")
  (export with-gst-debug)
  
  (define (make-value kind arg)
--- 85,90 ----
***************
*** 124,135 ****
  (define-method (add (bin <gst-bin>) . args)
    (for-each (lambda (element) (gst-bin-add bin element)) args))
  
! (define-method (link (e1 <gst-element>) (e2 <gst-element>) . rest)
!   (if (gst-element-link e1 e2)
!       (if (not (null? rest))
!           (apply link (cons e2 rest))
!           #t)
!       #f))
  
  (define-method (remove (bin <gst-bin>) . args)
    (for-each (lambda (element) (gst-bin-remove bin element)) args))
--- 123,135 ----
  (define-method (add (bin <gst-bin>) . args)
    (for-each (lambda (element) (gst-bin-add bin element)) args))
  
! ;;; this conflicts with the guile posix `link' function
! ;(define-method (link (e1 <gst-element>) (e2 <gst-element>) . rest)
! ;  (if (gst-element-link e1 e2)
! ;      (if (not (null? rest))
! ;          (apply link (cons e2 rest))
! ;          #t)
! ;      #f))
  
  (define-method (remove (bin <gst-bin>) . args)
    (for-each (lambda (element) (gst-bin-remove bin element)) args))
